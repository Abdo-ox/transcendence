version: '3.8'

services:
  user_management:
    build:
      context: ./srcs
      dockerfile: user_management/Dockerfile
    container_name: user_management
    ports:
      - "8000:8000"
    env_file:
      - .env
    volumes:
      - ./srcs/user_management/app:/usr/src/app
    networks:
      - net
    depends_on:
      db_nginx:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:8000 || exit 1"]




  db_nginx:
    build: 
      context: ./srcs
      dockerfile: db_nginx/Dockerfile
      args:
        CRT_PATH: ${PATH_CRT}
    container_name: db_nginx
    ports:
      - "443:443"
      - "8080:80"
    env_file:
      - .env
    networks:
      - net
    volumes:
      - ./srcs/db_nginx/front-end:/usr/share/nginx/html
      - db_nginx:/var/lib/postgresql/15/main
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME || exit 1"]  # Check Postgres readiness
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - net

  chat:
    build: 
      context: ./srcs
      dockerfile: chat/Dockerfile
    container_name: chat
    ports:
      - "9000:8000"
    env_file:
      - .env
    networks:
      - net
    depends_on:
      redis:
          condition: service_started
      db_nginx:
        condition: service_healthy  # Wait until db_nginx is healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:8000 || exit 1"]  # Customize based on app health

  game:
    build: 
      context: ./srcs
      dockerfile: game/Dockerfile
    ports:
      - "9090:8000"
    env_file:
      - .env
    networks:
      - net
    volumes:
      - ./srcs/game/pong_backend:/game
    depends_on:
      redis:
          condition: service_started
      db_nginx:
        condition: service_healthy  # Wait until db_nginx is healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f https://localhost:8000 || exit 1"]  # Customize based on app health

networks:
  net:

volumes:
  db_nginx:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './db'
